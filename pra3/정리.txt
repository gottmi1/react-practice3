해당 섹션 포인트
1. Effects혹은 side Effects가 무엇을 의미하는지
2. 리듀서를 사용해 컴포넌트 내의 복잡한 상태를 관리하는 법
3. 앱 차원 혹은 컴포넌트 차원의 상태에대해 알아보기

side Effect = 어플리케이션 내에서 벌어지는 모든 일의 총칭
요청, 데이터 패치, 인풋에 데이터 입력등 무엇이든 될 수 있다
useEffect를 사용하여 다룰 수 있음
2개의 파라미터와 함께 호출된다
1. 지정된 디펜던시들이 변할 때 모든 컴포넌트를 평가한 후에 실행해야 하는 함수. 2에 변화가 생겼을 때만 실행된다
2. 1에서 지정한 디펜던시(의존성)의 배열
새로 렌더될 때가 아니라 디펜던시에 변화가 생겼을 때만 실행된다.

useEffect : side Effect가 있을 때 그에 반응해서 코드를 실행하거나 컴포넌트를 로드하거나할 수 있음 
중속성(두번째 인자인 배열)으론 보통 컴포넌트 함수에 정의된 변수나 상태, 컴포넌트 함수에 정의된 props 또는 함수가 종속성으로 추가되어야 한다.(상태 업데이트 set..은 추가할 필요가 없음)
중속성으로 쓰이지 말아야 할 것들 : set..,내장API와 내장함수,변수 혹은 함수(외부에서 정의하면 됨)

useReducer는 useState를 사용하기 너무 번거로울 때 사용된다

useState는 보통 메인 state를 관리할 때 사용한다(대부분의 경우 이것만 있으면 됨)
개별 state를 관리하기 때문에 간단한 작업에 적합하다

복잡하거나 state객체가 있는경우 reducer사용을 고려해볼 수 있음
reducer함수를 사용할 수 있기 때문에 상위호환이지만 그만큼 복잡하다

컨텍스트 API

프롭 체인을 원활하게 해주기 위해 사용된다. 컴포넌트끼리 접점이 없어도 app.js까지 끌어올릴 필요 없이 전달 가능